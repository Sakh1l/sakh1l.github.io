---
import PageMeta from "../components/PageMeta.astro";
import PageLayout from "../layouts/PageLayout.astro";
import Intro from "../components/Intro.astro";
import AboutTheTheme from "../components/AboutTheTheme.astro";
import { SITE_TITLE } from "../config";
// fetch API key
const apiKey = import.meta.env.API_NINJAS_KEY;
if (!apiKey) {
  console.error('API_NINJAS_KEY is not set in .env file');
}
---

<PageLayout>
  <PageMeta title={`${SITE_TITLE}`} slot="meta" />
  <Fragment slot="main">
    <Intro />
    <div class="quote-container my-8 p-4 bg-dark-blue-100 rounded-lg">
      <p id="quote" class="text-lg italic">Loading quote...</p>
      <p id="author" class="text-right mt-2 font-bold"></p>
      <pre id="debug-info" class="mt-4 text-sm text-gray-600 whitespace-pre-wrap hidden"></pre>
    </div>
    
    
    <AboutTheTheme />
  </Fragment>
</PageLayout>

<script define:vars={{ apiKey }}>
  // Fallback quotes in case the API fails
  const fallbackQuotes = [
    { quote: 'The only way to do great work is to love what you do.', author: 'Steve Jobs' },
    { quote: 'Innovation distinguishes between a leader and a follower.', author: 'Steve Jobs' },
    { quote: 'Stay hungry, stay foolish.', author: 'Steve Jobs' }
  ];

  async function fetchQuote() {
    const debugInfo = document.getElementById('debug-info');
    const quoteElement = document.getElementById('quote');
    const authorElement = document.getElementById('author');

    // Reset and hide debug info
    debugInfo.textContent = '';
    debugInfo.classList.add('hidden');
    
    // Log API key status to debug info only
    const keyStatus = !!apiKey ? 'present' : 'missing';
    console.debug(`API Key status: ${keyStatus}`);
    if (apiKey) {
      console.debug(`API Key length: ${apiKey.length} characters`);
    }

    if (!apiKey) {
      quoteElement.textContent = 'API key not configured. Please check .env file.';
      return;
    }

    try {
      console.debug('Starting API request...');
      const apiUrl = 'https://api.api-ninjas.com/v1/quotes';
      console.debug('URL:', apiUrl);
      
      // Verify we're using HTTPS in production
      if (window.location.protocol === 'https:' && !apiUrl.startsWith('https:')) {
        apiUrl = apiUrl.replace('http:', 'https:');
      }

      console.debug('Using protocol:', window.location.protocol);
      console.debug('Final API URL:', apiUrl);

      // Test network connectivity with proper error handling
      try {
        console.debug('Testing API endpoint...');
        const testResponse = await fetch('https://api.api-ninjas.com/v1/quotes', {
          method: 'OPTIONS',
          headers: {
            'Accept': 'application/json',
            'X-Api-Key': apiKey
          }
        });
        console.debug(`Preflight test: ${testResponse.ok ? 'Success' : 'Failed'} (Status: ${testResponse.status})`);
      } catch (networkError) {
        console.error('Network test error:', {
          name: networkError.name,
          message: networkError.message,
          stack: networkError.stack
        });
        console.debug('Preflight test failed. Attempting direct request...');
      }

      // Make the actual API request
      console.debug('Sending request with API key...');
      // Create an AbortController for timeout
      const controller = new AbortController();
      const timeout = setTimeout(() => controller.abort(), 10000); // 10 second timeout

      let response;
      try {
        console.debug('Initiating fetch with timeout...');
        response = await fetch(apiUrl, {
          method: 'GET',
          headers: {
            'X-Api-Key': apiKey,
            'Accept': 'application/json'
          },
          mode: 'no-cors',  // Try without CORS first
          signal: controller.signal,
          credentials: 'omit'
        });

        // If no-cors fails, try with cors
        if (!response.ok) {
          console.debug('Retrying with CORS...');
          response = await fetch(apiUrl, {
            method: 'GET',
            headers: {
              'X-Api-Key': apiKey,
              'Accept': 'application/json'
            },
            mode: 'cors',
            signal: controller.signal,
            credentials: 'omit'
          });
        }

        clearTimeout(timeout);
        console.debug('Fetch completed successfully');
      } catch (fetchError) {
        clearTimeout(timeout);
        console.error('Fetch error details:', {
          name: fetchError.name,
          message: fetchError.message,
          type: fetchError.type,
          toString: fetchError.toString()
        });
        if (fetchError.name === 'AbortError') {
          throw new Error('Request timed out after 10 seconds');
        }
        throw new Error(`Fetch failed: ${fetchError.toString()}`);
      }

      if (!response) {
        throw new Error('No response received from fetch');
      }

      console.debug('Response received:', {
        status: response.status,
        statusText: response.statusText
      });
      
      // Log response headers for debugging
      const headers = {};
      for (const [key, value] of response.headers) {
        headers[key] = value;
      }
      console.debug('Response headers:', headers);

      if (!response.ok) {
        if (response.status === 401 || response.status === 403) {
          throw new Error('API key is invalid or unauthorized');
        }
        throw new Error(`HTTP error! status: ${response.status} (${response.statusText})`);
      }

      let data;
      try {
        // Try to get the response as JSON first
        try {
          data = await response.json();
          console.debug('Response parsed as JSON successfully');
        } catch (jsonError) {
          // If JSON parsing fails, try to get the raw text
          const rawText = await response.text();
          console.debug('Raw response:', rawText);
          
          // Try parsing the raw text as JSON
          try {
            data = JSON.parse(rawText);
            console.debug('Raw text parsed as JSON successfully');
          } catch (parseError) {
            throw new Error(`Failed to parse response: ${parseError.message}. Raw response: ${rawText}`);
          }
        }
      } catch (error) {
        console.debug('Falling back to default quote due to parsing error');
        console.warn('Using fallback quote due to parsing error:', error);
        data = [fallbackQuotes[Math.floor(Math.random() * fallbackQuotes.length)]];
      }

      // Validate response format
      if (!Array.isArray(data)) {
        throw new Error(`Invalid response format: Expected array, got ${typeof data}. Response: ${JSON.stringify(data)}`);
      }
      if (data.length === 0) {
        throw new Error('No quotes returned from API');
      }
      if (!data[0]?.quote || !data[0]?.author) {
        throw new Error(`Invalid quote format. Response: ${JSON.stringify(data[0])}`);
      }

      console.debug('Quote data validated successfully!');
      quoteElement.textContent = `"${data[0].quote}"`;
      authorElement.textContent = `- ${data[0].author}`;
    } catch (error) {
      console.error('Error fetching quote:', {
        name: error.name,
        message: error.message,
        stack: error.stack,
        toString: error.toString()
      });
      quoteElement.textContent = 'Failed to load quote';
      
      // Only show debug info on error
      debugInfo.textContent = `Error Details:\nType: ${error.name}\nMessage: ${error.message}`;
      debugInfo.classList.remove('hidden');
      
      // Log detailed error info to console only
      if (error.stack) {
        console.debug('Stack trace:', error.stack);
      }
      
      // Log error type for debugging
      if (error.message.includes('Network connectivity issue')) {
        console.debug('Network connectivity issue detected');
      } else if (error.message.includes('invalid or unauthorized')) {
        console.debug('API key issue detected');
      }
    }
  }
  
  // Initial fetch
  fetchQuote();
</script>

<style>
  /* Add any additional styles here if needed */
  .quote-container {
    /* You can adjust these styles to match your theme */
    border-left: 4px solid #3b82f6; /* Adjust color as needed */
  }
</style>