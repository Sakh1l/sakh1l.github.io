---
import PageMeta from "../components/PageMeta.astro";
import PageLayout from "../layouts/PageLayout.astro";
import Intro from "../components/Intro.astro";
import AboutTheTheme from "../components/AboutTheTheme.astro";
import { SITE_TITLE } from "../config";
// fetch API key
const apiKey = import.meta.env.API_NINJAS_KEY;
if (!apiKey) {
  console.error('API_NINJAS_KEY is not set in .env file');
}
---

<PageLayout>
  <PageMeta title={`${SITE_TITLE}`} slot="meta" />
  <Fragment slot="main">
    <Intro />
    <div class="quote-container my-8 p-4 bg-dark-blue-100 rounded-lg">
      <p id="quote" class="text-lg italic">Loading quote...</p>
      <p id="author" class="text-right mt-2 font-bold"></p>
      <pre id="debug-info" class="mt-4 text-sm text-gray-600 whitespace-pre-wrap"></pre>
    </div>
    
    
    <AboutTheTheme />
  </Fragment>
</PageLayout>

<script define:vars={{ apiKey }}>
  // Fallback quotes in case the API fails
  const fallbackQuotes = [
    { quote: 'The only way to do great work is to love what you do.', author: 'Steve Jobs' },
    { quote: 'Innovation distinguishes between a leader and a follower.', author: 'Steve Jobs' },
    { quote: 'Stay hungry, stay foolish.', author: 'Steve Jobs' }
  ];

  async function fetchQuote() {
    const debugInfo = document.getElementById('debug-info');
    const quoteElement = document.getElementById('quote');
    const authorElement = document.getElementById('author');

    // Reset debug info
    debugInfo.textContent = '';

    // Check API key
    const keyStatus = !!apiKey ? 'present' : 'missing';
    debugInfo.textContent = `API Key status: ${keyStatus}`;
    if (apiKey) {
      debugInfo.textContent += `\nAPI Key length: ${apiKey.length} characters`;
    }

    if (!apiKey) {
      quoteElement.textContent = 'API key not configured. Please check .env file.';
      return;
    }

    try {
      debugInfo.textContent += '\n\nStarting API request...';
      const apiUrl = 'https://api.api-ninjas.com/v1/quotes';
      debugInfo.textContent += `\nURL: ${apiUrl}`;
      
      // Verify we're using HTTPS in production
      if (window.location.protocol === 'https:' && !apiUrl.startsWith('https:')) {
        apiUrl = apiUrl.replace('http:', 'https:');
      }

      debugInfo.textContent += `\nUsing protocol: ${window.location.protocol}`;
      debugInfo.textContent += `\nFinal API URL: ${apiUrl}`;

      // Test network connectivity with proper error handling
      try {
        debugInfo.textContent += '\nTesting API endpoint...';
        const testResponse = await fetch('https://api.api-ninjas.com/v1/quotes', {
          method: 'OPTIONS',
          headers: {
            'Accept': 'application/json',
            'X-Api-Key': apiKey
          }
        });
        debugInfo.textContent += `\nPreflight test: ${testResponse.ok ? 'Success' : 'Failed'} (Status: ${testResponse.status})`;
      } catch (networkError) {
        console.error('Network test error:', {
          name: networkError.name,
          message: networkError.message,
          stack: networkError.stack
        });
        debugInfo.textContent += '\nPreflight test failed. Attempting direct request...';
      }

      // Make the actual API request
      debugInfo.textContent += '\nSending request with API key...';
      // Create an AbortController for timeout
      const controller = new AbortController();
      const timeout = setTimeout(() => controller.abort(), 10000); // 10 second timeout

      let response;
      try {
        debugInfo.textContent += '\nInitiating fetch with timeout...';
        response = await fetch(apiUrl, {
          method: 'GET',
          headers: {
            'X-Api-Key': apiKey,
            'Accept': 'application/json'
          },
          mode: 'no-cors',  // Try without CORS first
          signal: controller.signal,
          credentials: 'omit'
        });

        // If no-cors fails, try with cors
        if (!response.ok) {
          debugInfo.textContent += '\nRetrying with CORS...';
          response = await fetch(apiUrl, {
            method: 'GET',
            headers: {
              'X-Api-Key': apiKey,
              'Accept': 'application/json'
            },
            mode: 'cors',
            signal: controller.signal,
            credentials: 'omit'
          });
        }

        clearTimeout(timeout);
        debugInfo.textContent += '\nFetch completed successfully';
      } catch (fetchError) {
        clearTimeout(timeout);
        console.error('Fetch error details:', {
          name: fetchError.name,
          message: fetchError.message,
          type: fetchError.type,
          toString: fetchError.toString()
        });
        if (fetchError.name === 'AbortError') {
          throw new Error('Request timed out after 10 seconds');
        }
        throw new Error(`Fetch failed: ${fetchError.toString()}`);
      }

      if (!response) {
        throw new Error('No response received from fetch');
      }

      debugInfo.textContent += `\nResponse received:\n  Status: ${response.status}\n  Status Text: ${response.statusText}`;
      
      // Log response headers for debugging
      const headers = {};
      for (const [key, value] of response.headers) {
        headers[key] = value;
      }
      debugInfo.textContent += `\n  Headers: ${JSON.stringify(headers, null, 2)}`;

      if (!response.ok) {
        if (response.status === 401 || response.status === 403) {
          throw new Error('API key is invalid or unauthorized');
        }
        throw new Error(`HTTP error! status: ${response.status} (${response.statusText})`);
      }

      let data;
      try {
        // Try to get the response as JSON first
        try {
          data = await response.json();
          debugInfo.textContent += '\nResponse parsed as JSON successfully';
        } catch (jsonError) {
          // If JSON parsing fails, try to get the raw text
          const rawText = await response.text();
          debugInfo.textContent += `\nRaw response: ${rawText}`;
          
          // Try parsing the raw text as JSON
          try {
            data = JSON.parse(rawText);
            debugInfo.textContent += '\nRaw text parsed as JSON successfully';
          } catch (parseError) {
            throw new Error(`Failed to parse response: ${parseError.message}. Raw response: ${rawText}`);
          }
        }
      } catch (error) {
        debugInfo.textContent += '\nFalling back to default quote due to parsing error';
        console.warn('Using fallback quote due to parsing error:', error);
        data = [fallbackQuotes[Math.floor(Math.random() * fallbackQuotes.length)]];
      }

      // Validate response format
      if (!Array.isArray(data)) {
        throw new Error(`Invalid response format: Expected array, got ${typeof data}. Response: ${JSON.stringify(data)}`);
      }
      if (data.length === 0) {
        throw new Error('No quotes returned from API');
      }
      if (!data[0]?.quote || !data[0]?.author) {
        throw new Error(`Invalid quote format. Response: ${JSON.stringify(data[0])}`);
      }

      debugInfo.textContent += '\nQuote data validated successfully!';
      quoteElement.textContent = `"${data[0].quote}"`;
      authorElement.textContent = `- ${data[0].author}`;
    } catch (error) {
      console.error('Error fetching quote:', {
        name: error.name,
        message: error.message,
        stack: error.stack,
        toString: error.toString()
      });
      quoteElement.textContent = 'Failed to load quote';
      debugInfo.textContent += `\n\nError Details:\nType: ${error.name}\nMessage: ${error.message}\nFull error: ${error.toString()}`;
      if (error.stack) {
        debugInfo.textContent += `\n\nStack trace:\n${error.stack}`;
      }
      
      // Provide specific guidance based on error type
      if (error.message.includes('Network connectivity issue')) {
        debugInfo.textContent += '\n\nTroubleshooting steps:\n1. Check your internet connection\n2. Verify if api.api-ninjas.com is accessible\n3. Check if a firewall is blocking the request';
      } else if (error.message.includes('invalid or unauthorized')) {
        debugInfo.textContent += '\n\nTroubleshooting steps:\n1. Verify your API key in the .env file\n2. Ensure the API key is correctly copied from API Ninjas dashboard\n3. Check if your API subscription is active';
      } else if (error.message.includes('Failed to parse JSON')) {
        debugInfo.textContent += '\n\nTroubleshooting steps:\n1. Check if the API response is valid JSON\n2. Verify if the API endpoint is correct\n3. Try the request again (sometimes APIs may return invalid responses)';
      } else if (error.message.includes('Invalid response format')) {
        debugInfo.textContent += '\n\nTroubleshooting steps:\n1. Verify that you are using the correct API endpoint\n2. Check if your API key has access to the quotes endpoint\n3. Try specifying a different category or no category';
      }
    }
  }
  
  // Initial fetch
  fetchQuote();

  // Add retry button
  const retryButton = document.createElement('button');
  retryButton.textContent = 'Retry';
  retryButton.className = 'mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600';
  retryButton.onclick = fetchQuote;
  document.querySelector('.quote-container').appendChild(retryButton);
</script>

<style>
  /* Add any additional styles here if needed */
  .quote-container {
    /* You can adjust these styles to match your theme */
    border-left: 4px solid #3b82f6; /* Adjust color as needed */
  }
</style>