---
---

<mode-toggle class="flex">
  <button
    class="justify-self-end bg-black dark:bg-white ml-4 inline-flex h-6 w-11 items-center rounded-full"
    id="mode-toggle"
    role="switch"
    type="button"
    tabindex="0"
    aria-checked="false"
    data-headlessui-state=""
  >
    <span class="sr-only">Toggle dark mode</span>
    <span
      id="mode-circle"
      class="light inline-block h-4 w-4 rounded-full bg-gradient-to-tr invisible"
    >
      <span
        class="absolute top-0 right-0 w-[10px] h-[10px] rounded-full bg-gray-700 scale-[0]"
      ></span>
    </span>
  </button>
</mode-toggle>

<script>
  class ModeToggle extends HTMLElement {
    private currentMode: "light" | "dark";
    private toggle: HTMLButtonElement | null;
    private iconElem: HTMLElement | null;

    constructor() {
      super();
      this.currentMode = document.documentElement.classList.contains("dark") ? "dark" : "light";
      this.toggle = this.querySelector("button");
      this.iconElem = this.toggle?.querySelector("#mode-circle") || null;
      
      this.init();
    }

    private init() {
      if (!this.iconElem) return;

      // Set initial state
      if (this.currentMode === "dark") {
        this.iconElem.classList.remove("light");
        this.iconElem.classList.add("dark");
      }

      // Remove invisible class to prevent flash
      this.iconElem.classList.remove("invisible");

      // Add click listener
      this.toggle?.addEventListener("click", () => this.toggleTheme());
    }

    private toggleTheme() {
      if (!this.iconElem) return;

      const newMode = this.currentMode === "dark" ? "light" : "dark";
      
      // Update UI
      this.iconElem.classList.toggle("light", newMode === "light");
      this.iconElem.classList.toggle("dark", newMode === "dark");
      
      // Update theme
      this.updateHTMLTheme(newMode);
      this.updateStorageTheme(newMode);
      
      // Add animation class if not present
      if (!this.iconElem.classList.contains("duration-300")) {
        this.iconElem.classList.add("duration-300");
      }
      
      this.currentMode = newMode;
    }

    private updateHTMLTheme(mode: "light" | "dark") {
      const themeColorMetaTag = document.head.querySelector('meta[name="theme-color"]') as HTMLMetaElement;
      
      document.documentElement.classList.toggle("light", mode === "light");
      document.documentElement.classList.toggle("dark", mode === "dark");
      
      if (themeColorMetaTag) {
        themeColorMetaTag.content = mode === "dark" ? "#262626" : "#ffffff";
      }
    }

    private updateStorageTheme(mode: "light" | "dark") {
      sessionStorage.setItem("theme", mode);
    }
  }

  customElements.define("mode-toggle", ModeToggle);
</script>

<style>
  .light {
    transform: translateX(0.25rem);
    background-color: rgb(var(--color-primary-yellow));
  }
  .dark {
    transform: translateX(1.5rem);
    background-color: rgb(var(--color-primary-blue));
  }
</style>
